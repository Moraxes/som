use clap::{Arg, ArgMatches, SubCommand, App};

pub fn get<'a>() -> ArgMatches<'a> {
  App::new("som")
    .version("0.1")
    .author("Maciej Åšniegocki <m.w.sniegocki@gmail.com")
    .subcommand(SubCommand::with_name("train-img")
      .arg(Arg::with_name("config")
        .long("config")
        .short("c")
        .takes_value(true)
        .default_value("Config.json")
        .help("training configuration file"))
      .arg(Arg::with_name("net_defn")
        .long("net-defn")
        .short("n")
        .takes_value(true)
        .default_value("Som.json")
        .help("network definition file"))
      .arg(Arg::with_name("input")
        .required(true)
        .index(1)
        .help("input image file to train the map on"))
      .arg(Arg::with_name("lab")
        .long("lab")
        .short("l")
        .help("if given, the input image is converted to Lab space first"))
      .arg(Arg::with_name("output")
        .long("output")
        .short("o")
        .takes_value(true)
        .default_value("Model.bc")
        .help("output file for the model"))
      .arg(Arg::with_name("image")
        .long("image")
        .short("i")
        .takes_value(true)
        .default_value("map.png")
        .help("path to image file with map visualization"))
      .about("train a self-organizing map on an image"))
    .get_matches()
}
